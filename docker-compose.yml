services:
  # PostgreSQL Database
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rocket_launch_genai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - document_storage:/app/storage/documents
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    environment:
      - PYTHONPATH=/app
      - DOCUMENT_STORAGE_PATH=/app/storage/documents
    entrypoint: ["./docker-entrypoint.sh"]
    command: celery -A tasks.worker:celery_app worker --loglevel=info
    volumes:
      - ./backend:/app
      - document_storage:/app/storage/documents
    depends_on:
      - redis
      - postgres

  # Celery Flower (monitoring)
  flower:
    image: mher/flower:2.0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker

  # Frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend/public:/app/public
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
  document_storage: 