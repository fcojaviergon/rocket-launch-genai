# docker-compose.override.yml (Development settings)
# This file is automatically merged with docker-compose.yml for `docker-compose up`

services:
  backend:
    env_file:
      - ./backend/.env.development
    # Mount the full backend code for hot-reloading
    # The base docker-compose.yml already mounts ./backend:/app, so this overrides/confirms it.
    volumes:
      - ./backend:/app 
      - document_storage:/app/storage/documents # Ensure storage volume is still mapped
    # Use a command that enables auto-reloading for development
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload 
    environment:
      # Development specific settings can go here, overriding base docker-compose.yml
      # Example: Setting ENVIRONMENT specifically for development override
      ENVIRONMENT: development
      DB_ECHO_LOG: "true" # Example: Enable SQL echoing for dev
      LOG_LEVEL: DEBUG # Example: More verbose logging for dev
      ENV_FILE: backend/.env.development # Explicitly load dev env file if needed
      # ---> Add container-specific paths here <---
      CONTAINER_DOCUMENT_STORAGE_PATH: /app/storage/documents
      CONTAINER_LOG_DIR: /app/logs
    ports:
      - "8000:8000" # Expose backend port for direct access if needed in dev

  celery_worker:
    env_file:
      - ./backend/.env.development
    # Mount the full backend code for task updates without rebuild
    # The base docker-compose.yml already mounts ./backend:/app
    volumes:
      - ./backend:/app
      - document_storage:/app/storage/documents
    # Optional: Add watchmedo for auto-restarting the worker on code changes
    # command: watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A tasks.worker:celery_app worker --loglevel=info
    # If not using watchmedo, the default command from base docker-compose.yml is used.

  flower:
     env_file:
      - ./backend/.env.development # Uses dev Redis broker URL

  frontend:
    env_file:
      - ./frontend/.env.development
    # Use a development-specific build stage if available in frontend/Dockerfile
    # build:
    #   context: ./frontend
    #   target: development 
    # Mount full frontend code for hot-reloading
    # Exclude node_modules to use container's node_modules, avoiding OS conflicts
    volumes:
      - ./frontend:/app
      - /app/node_modules 
      - /app/.next # Persist .next cache between runs if desired
    # Run the development server command
    command: npm run dev 
    environment:
      NODE_ENV: development
      ENV_FILE: frontend/.env.development # Explicitly load dev env file if needed
    ports:
      - "3000:3000"

# Development overrides typically don't need separate volumes for DB/Redis
# as the base docker-compose.yml likely defines them.

# Example override for worker if needed
# worker:
#   environment:
#     LOG_LEVEL: DEBUG
#     ENV_FILE: backend/.env.development 